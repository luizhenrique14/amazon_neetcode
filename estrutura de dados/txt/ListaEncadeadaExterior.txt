// 🧩 Classe No: representa um nó da lista encadeada
// Cada nó guarda um valor e uma referência para o próximo nó
class No {
    constructor(valor) {
        this.valor = valor; // 🗃️ Valor armazenado no nó
        this.proximo = null; // 🔗 Referência para o próximo nó
    }
     constructor(valor, proximo = null) {
        this.valor = valor; // 🗃️ Valor armazenado no nó
        this.proximo = proximo; // 🔗 Referência para o próximo nó (padrão é null
     }
}

// 📚 Classe ListaEncadeada: controla a corrente de colisões
// Permite adicionar valores e imprimir a lista encadeada
class ListaEncadeada {
    constructor() {
        this.inicio = null; // 🚩 Referência para o primeiro nó da lista
    }

    // ➕ Adiciona um novo valor ao final da lista
    // Se a lista estiver vazia, o novo nó vira o início
    // Caso contrário, percorre até o último nó e adiciona lá
    adicionar_no_NO(valor) {
        console.log(`➕ [ListaEncadeada] Adicionando valor: ${valor}`);

        // Verifica se a lista está vazia
        if (this.inicio) {
            
            console.log("💥 [COLISAO]");
            console.log("🔗 [ListaEncadeada] Lista NÃO está vazia, procurando o final...");
            let atual = this.inicio;
            let passos = 0;
            while (atual.proximo) {
                console.log(`🔎 [ListaEncadeada] Passo ${passos}: nó atual = ${atual.valor}`);
                atual = atual.proximo;
                passos++;
            }
            console.log(`🏁 [ListaEncadeada] Último nó encontrado: ${atual.valor}`);
            atual.proximo = new No(valor); // 🔗 Adiciona ao final
            console.log(`✅ [ListaEncadeada] Nó com valor ${valor} adicionado ao final!`);
        } else {
            console.log("🚩 [ListaEncadeada] Lista está vazia, criando o primeiro nó...");
            this.inicio = new No(valor); // 🏁 Lista estava vazia, novo nó é o início
            console.log(`✅ [ListaEncadeada] Novo nó (${valor}) é o início da lista!`);
        }
    }

    // 🔍 Busca um valor na lista encadeada
    buscar_na_lista(valor) {
        console.log(`🔎 [Busca] Procurando valor ${valor} na lista...`);
        let atual = this.inicio;
        let posicao = 0;

        while (atual) {
            console.log(`🔍 Verificando nó na posição ${posicao} com valor: ${atual.valor}`);
            if (atual.valor === valor) {
                console.log(`✅ [Busca] Valor ${valor} encontrado na posição ${posicao}!`);
                return true;
            }
            atual = atual.proximo;
            posicao++;
        }

        console.log(`❌ [Busca] Valor ${valor} não encontrado na lista.`);
        return false;
    }

    // ❌ Remove um valor da lista encadeada (se existir)
    remover_da_lista(valor) {
        console.log(`🗑️ [Remoção] Tentando remover valor ${valor} da lista...`);

        if (!this.inicio) {
            console.log("⚠️ [Remoção] Lista está vazia, nada a remover.");
            return;
        }

        // Caso especial: valor está logo no início
        if (this.inicio.valor === valor) {
            console.log(`🚨 [Remoção] Valor ${valor} era o primeiro nó. Removido!`);
            this.inicio = this.inicio.proximo;
            return;
        }

        let posicao_atual = this.inicio;
        let anterior = null;

        while (posicao_atual && posicao_atual.valor !== valor) {
            anterior = posicao_atual;
            posicao_atual = posicao_atual.proximo;
        }

        if (posicao_atual) {
            console.log(`✅ [Remoção] Valor ${valor} encontrado e removido.`);
            anterior.proximo = atual.proximo;
        } else {
            console.log(`❌ [Remoção] Valor ${valor} não encontrado. Nada foi removido.`);
        }
    }


    // 🖨️ Imprime todos os valores da lista encadeada
    // Percorre do início até o fim, mostrando cada valor
    imprimir() {
        let atual = this.inicio;
        let resultado = "";
        let pos = 0;

        if (!atual) {
            // console.log("⚠️ [ListaEncadeada] Lista está vazia!");
            return "null";
        }

        while (atual) {
            // console.log(`📍 [ListaEncadeada] Nó ${pos}: ${atual.valor}`);
            resultado += `[${atual.valor}] → `; // 📍 Mostra valor do nó
            atual = atual.proximo;
            pos++;
        }

        // console.log("✅ [ListaEncadeada] Fim da lista!");
        return resultado + "null"; // ✅ Fim da lista
    }
}

// 🗃️ Classe TabelaHash: estrutura principal da tabela hash
// Usa encadeamento exterior para tratar colisões
class TabelaHash {
    constructor() {
        this.tamanho = 6; // 🔢 Tamanho fixo da tabela
        this.tabela = Array.from({ length: this.tamanho },() => new ListaEncadeada());        // 🪣 Cada posição é uma ListaEncadeada (bucket)
    }

    // 🔑 Função de hash: calcula o índice para o valor
    gera_indice_hash_DJB2(valor) {
        let str = valor.toString();
        let hash = 5381;
        for (let i = 0; i < str.length; i++) {
            hash = 33 + hash + str.charCodeAt(i);
        }
        return Math.abs(hash) % this.tamanho;
    }

    // ➕ Insere valor na tabela, tratando colisão por encadeamento
    inserir_item_tabela_hash(valor) {
        const indice = this.gera_indice_hash_DJB2(valor);
        console.log(`🔐 Inserindo ${valor} no índice ${indice}`);
        this.tabela[indice].adicionar_no_NO(valor); // Adiciona no bucket correto
    }

    // 🖨️ Imprime toda a tabela hash
    imprimirTabela() {
        console.log("\n📋 Tabela Hash com Encadeamento Exterior:");
        for (let i = 0; i < this.tabela.length; i++) {
            // Mostra cada índice e sua corrente de colisões
            console.log(`********************************* Índice ${i}: ${this.tabela[i].imprimir()}`);
        }
    }
}

// 🚀 Exemplo de uso da Tabela Hash
const tabela = new TabelaHash();

tabela.inserir_item_tabela_hash(12); 
tabela.inserir_item_tabela_hash(21); 
tabela.inserir_item_tabela_hash(9);  
tabela.inserir_item_tabela_hash(33); 
tabela.inserir_item_tabela_hash(10); 

tabela.imprimirTabela(); // Mostra toda a tabela e as colisões

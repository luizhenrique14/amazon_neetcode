
// Importa a ListaEncadeada do arquivo exterior
// Se estiver rodando em Node.js, use require. Se for browser, ajuste para import/export.
const { ListaEncadeada } = require('./ListaEncadeadaExterior');

class TabelaHash {
  constructor(tamanho) {
    this.tabela = new Array(tamanho);
    this.tamanho = tamanho;
    // Inicializa cada bucket como uma ListaEncadeada
    for (let i = 0; i < tamanho; i++) {
      this.tabela[i] = new ListaEncadeada();
    }
  }

  // Fun√ß√£o de hash DJB2: transforma chave em √≠ndice
  funcao_hash_hashDJB2(chave) {
    let hash = 5381;
    let multiplicador = 33;
    for (let i = 0; i < chave.length; i++) {
      let codigo_numerico_do_caractere = chave.charCodeAt(i);
      hash = (hash * multiplicador) + codigo_numerico_do_caractere;
    }
    return Math.abs(hash % this.tamanho);
  }

  // Insere ou atualiza um valor na tabela usando ListaEncadeada
  inserir(chave, valor) {
    const indice = this.funcao_hash_hashDJB2(chave);
    console.log(`üî¢ [inserir] √çndice calculado para chave '${chave}': ${indice}`);
    // Remove chave se j√° existe (para atualizar)
    this.tabela[indice].remover(chave);
    // Adiciona novo valor (chave:valor como string)
    this.tabela[indice].adicionar(`${chave}:${valor}`);
  }

  // Busca valor pela chave usando ListaEncadeada
  buscar(chave) {
    const indice = this.funcao_hash_hashDJB2(chave);
    console.log(`üî¢ [buscar] √çndice calculado para chave '${chave}': ${indice}`);
    let atual = this.tabela[indice].inicio;
    while (atual) {
      if (typeof atual.valor === 'string' && atual.valor.startsWith(chave + ':')) {
        const valor = atual.valor.split(':').slice(1).join(':');
        console.log(`‚úÖ [buscar] Chave '${chave}' encontrada. Retornando valor '${valor}'.`);
        return valor;
      }
      atual = atual.proximo;
    }
    console.log(`‚ùå [buscar] Chave '${chave}' n√£o encontrada. Retornando undefined.`);
    return undefined;
  }

  // Remove chave da tabela usando ListaEncadeada
  remover(chave) {
    const indice = this.funcao_hash_hashDJB2(chave);
    console.log(`üî¢ [remover] √çndice calculado para chave '${chave}': ${indice}`);
    this.tabela[indice].remover(chave);
  }

  // Imprime toda a tabela usando ListaEncadeada
  imprimir() {
    for (let i = 0; i < this.tabela.length; i++) {
      console.log(`Bucket ${i}:`);
      this.tabela[i].imprimir();
    }
  }
}

// Testes e logs explicativos
const tabela = new TabelaHash(5);

console.log('--- Inserindo elementos ---');
tabela.inserir('nome', 'Jo√£o');
console.log('Inserido: nome -> Jo√£o');
tabela.inserir('idade', 30);
console.log('Inserido: idade -> 30');
tabela.inserir('cidade', 'S√£o Paulo');
console.log('Inserido: cidade -> S√£o Paulo');
tabela.inserir('nome', 'Maria');
console.log('Atualizado: nome -> Maria');

console.log('\n--- Buscando elementos ---');
console.log('Buscar nome:', tabela.buscar('nome'));
console.log('Buscar idade:', tabela.buscar('idade'));
console.log('Buscar cidade:', tabela.buscar('cidade'));
console.log('Buscar estado (n√£o existe):', tabela.buscar('estado'));

console.log('\n--- Removendo elementos ---');
tabela.remover('idade');
console.log('Removido: idade');
tabela.remover('estado');
console.log('Tentativa de remover estado (n√£o existe)');

console.log('\n--- Imprimindo tabela final ---');
tabela.imprimir();

// ===============================
// LISTA ENCADEADA INTERIOR HETEROG√äNEA
// ===============================

// Classe que representa um n√≥ da lista encadeada
class No {
  constructor(nome, dados) {
    this.nome = nome;       // Nome identificador (ex: "Ana", "Jo√£o")
    this.dados = dados;     // Dados heterog√™neos (array, objeto, n√∫mero, string, etc.)
    this.proximo = null;    // Ponteiro para o pr√≥ximo n√≥
  }
}

// Classe da Lista Encadeada Interior Heterog√™nea
class ListaEncadeadaHeterogenea {
  constructor() {
    this.inicio = null; // In√≠cio da lista (primeiro n√≥)
    console.log("‚úÖ Lista encadeada criada (vazia).");
  }

  // M√©todo para adicionar um novo n√≥ ao final da lista
  adicionar(nome, dados) {
    console.log(`üîÑ Adicionando "${nome}" com dados:`, dados);
    const novoNo = new No(nome, dados);

    if (!this.inicio) {
      this.inicio = novoNo;
      console.log(`üü¢ Primeiro n√≥ adicionado: "${nome}"`);
    } else {
      let atual = this.inicio;
      while (atual.proximo) {
        atual = atual.proximo;
      }
      atual.proximo = novoNo;
      console.log(`üü° N√≥ "${nome}" adicionado ao final da lista.`);
    }
  }

  // M√©todo para remover um n√≥ com base no nome
  remover(nome) {
    console.log(`\n‚ùå Tentando remover o n√≥ com nome: "${nome}"`);

    if (!this.inicio) {
      console.log("‚ö†Ô∏è Lista est√° vazia. Nada para remover.");
      return;
    }

    // Se o n√≥ a ser removido √© o primeiro
    if (this.inicio.nome === nome) {
      console.log(`‚úÖ N√≥ "${nome}" removido (era o primeiro da lista).`);
      this.inicio = this.inicio.proximo;
      return;
    }

    // Percorrer a lista procurando o n√≥
    let atual = this.inicio;
    while (atual.proximo && atual.proximo.nome !== nome) {
      atual = atual.proximo;
    }

    if (atual.proximo) {
      console.log(`‚úÖ N√≥ "${nome}" removido.`);
      atual.proximo = atual.proximo.proximo;
    } else {
      console.log(`‚ùå N√≥ "${nome}" n√£o encontrado na lista.`);
    }
  }

  // M√©todo para imprimir toda a lista
  imprimir() {
    console.log("\nüìÑ Imprimindo lista completa...");
    let atual = this.inicio;
    let contador = 1;

    if (!atual) {
      console.log("‚ö†Ô∏è Lista vazia.");
      return;
    }

    while (atual) {
      console.log(`\nüîπ N√≥ ${contador}`);
      console.log(`üî∏ Nome: ${atual.nome}`);
      console.log("üî∏ Dados:", atual.dados);
      atual = atual.proximo;
      contador++;
    }

    console.log("\n‚úÖ Fim da impress√£o.\n");
  }
}

// ===============================
// TESTE
// ===============================

const lista = new ListaEncadeadaHeterogenea();

// Adicionando dados
lista.adicionar("Ana", { disciplinas: ["Matem√°tica", "Biologia"] });
lista.adicionar("Luiz", [9.5, 8.0, 10.0]);
lista.adicionar("Jo√£o", 12345);
lista.adicionar("Maria", "Aprovada");
lista.adicionar("Carlos", { idade: 25, curso: "Engenharia" });

// Imprimindo antes da remo√ß√£o
lista.imprimir();

// Removendo um nome existente
lista.remover("Jo√£o");

// Tentando remover um nome que n√£o existe
lista.remover("Pedro");

// Removendo o primeiro n√≥
lista.remover("Ana");

// Imprimindo ap√≥s remo√ß√µes
lista.imprimir();
